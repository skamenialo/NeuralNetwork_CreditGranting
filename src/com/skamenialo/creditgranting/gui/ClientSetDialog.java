package com.skamenialo.creditgranting.gui;

import com.skamenialo.creditgranting.Client;
import java.awt.Color;
import java.awt.Component;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

public class ClientSetDialog extends JDialog {

    private JList mClientList;
    private ClientModel mClientModel;
    private boolean mLearning;

    public ClientSetDialog(Frame owner, boolean modal, boolean learning) {
        super(owner, modal);
        initComponents();
        if (learning) {
            setTitle(MainWindow.bundle.getString("ELEMENTY UCZĄCE"));
            mClientModel = new ClientModel(MainWindow.sLearningSet);
        } else {
            setTitle(MainWindow.bundle.getString("ELEMENTY WERYFIKUJĄCE"));
            mClientModel = new ClientModel(MainWindow.sVerifyingSet);
        }
        init(learning);
    }

    public ClientSetDialog(Frame owner, boolean modal, List<Client> list) {
        super(owner, modal);
        initComponents();
        setTitle(MainWindow.bundle.getString("ELEMENTY ZWERYFIKOWANE"));
        mClientModel = new ClientModel(list);
        jButton1.setVisible(false);
        init(true);
    }

    private void init(boolean learning) {
        mLearning = learning;
        mClientList = new JList(mClientModel);
        mClientList.setCellRenderer(new ClientCellRenderer());
        mClientList.setVisibleRowCount(4);
        jScrollPane2.setViewportView(mClientList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();

        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setType(java.awt.Window.Type.POPUP);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/skamenialo/creditgranting/gui/Text"); // NOI18N
        jButton1.setText(bundle.getString("DODAJ")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(bundle.getString("ZAMKNIJ")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        AddClientDialog cd = new AddClientDialog(this, true, mLearning);
        cd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                mClientModel.update();
            }
        });
        cd.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    class ClientModel extends AbstractListModel {

        private List<Client> items;

        public ClientModel(List<Client> list) {
            this.items = list;
        }

        @Override
        public Object getElementAt(int index) {
            return items.get(index);
        }

        @Override
        public int getSize() {
            return items.size();
        }

        public void update() {
            this.fireContentsChanged(this, 0, items.size() - 1);
        }
    }

    class ClientCellRenderer extends JLabel implements ListCellRenderer {

        private final Color HIGHLIGHT_COLOR = new Color(0, 0, 128);

        public ClientCellRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(JList list, Object value,
                int index, boolean isSelected, boolean cellHasFocus) {
            Client entry = (Client) value;
            if (mLearning) {
                setText(entry.isGrantedToString());
            } else {
                setText(entry.toString());
            }
            if (isSelected) {
                setBackground(HIGHLIGHT_COLOR);
                setForeground(Color.white);
            } else {
                setBackground(Color.white);
                setForeground(Color.black);
            }
            return this;
        }
    }
}
